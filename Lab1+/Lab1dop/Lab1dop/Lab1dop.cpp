#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include < math.h >
#include <iostream>

// Функция сортировки методом фон Неймана
void mergeSort(int* arr, int l, int r)
{
    if (l == r)
        return; // границы сомкнулись
    int mid = (l + r) / 2; // определяем середину последовательности
    // и рекурсивно вызываем функцию сортировки для каждой половины
    mergeSort(arr, l, mid);
    mergeSort(arr, mid + 1, r);
    int i = l;  // начало первого пути
    int j = mid + 1; // начало второго пути
    int* tmp = (int*)malloc(r * sizeof(int)); // дополнительный массив
    for (int step = 0; step < r - l + 1; step++) // для всех элементов дополнительного массива
    {
        // записываем в последовательность меньший из элементов двух путей
        if ((j > r) || ((i <= mid) && (arr[i] < arr[j])))
        {
            tmp[step] = arr[i];
            i++;
        }
        else
        {
            tmp[step] = arr[j];
            j++;
        }
    }
    // переписываем сформированную последовательность в исходный массив
    for (int step = 0; step < r - l + 1; step++)
        arr[l + step] = tmp[step];
}
void main()
{
    //---------------------------------------------------------------------------------------
    setlocale(LC_ALL, "rus");
    int Size;
    printf("Введити длинну массива: ");
    while (1) {
        scanf_s("%d", &Size);
        if (Size <= 0)
        {
            printf("Неккоректная длинан массива, введите число заного: ");
            continue;
        }
        else
            break;
    }
    int* arr = new int[Size];

    //---------------------------------------------------------------------------------------
    // Заполняем элементы массива
    printf("Изначальный массив: \t");
    srand(time(NULL));
    for (int i = 0; i < Size; i++)
    {
        arr[i] = (rand() % 100);
        printf(" %d ", arr[i]);
    }
    printf("\n");

    //---------------------------------------------------------------------------------------
    mergeSort(arr, 0, Size - 1); // вызываем функцию сортировки

    //---------------------------------------------------------------------------------------
    // Выводим отсортированный массив
    printf("Отсортированный массив: ");
    for (int i = 0; i < Size; i++)
        printf(" %d ", arr[i]);
    printf("\n");

    //---------------------------------------------------------------------------------------
    delete[] arr;
}
